{
  "mcpServers": {
    "datadog-scraper": {
      "command": "python",
      "args": ["/app/datadog_mcp_server.py"],
      "env": {
        "SCRAPER_URL": "http://localhost:8000",
        "MCP_SERVER_PORT": "8001",
        "LOG_LEVEL": "INFO"
      }
    }
  },

  "datadogMcpServer": {
    "name": "Datadog Documentation Scraper MCP Server",
    "description": "MCP server for interacting with Datadog documentation scraper",
    "version": "1.0.0",

    "tools": [
      {
        "name": "scrape_datadog_docs",
        "description": "Scrape Datadog documentation and return structured data",
        "inputSchema": {
          "type": "object",
          "properties": {
            "max_depth": {
              "type": "integer",
              "description": "Maximum scraping depth (1-3)",
              "default": 2
            },
            "delay": {
              "type": "number",
              "description": "Delay between requests in seconds",
              "default": 0.5
            },
            "save_results": {
              "type": "boolean",
              "description": "Whether to save results to files",
              "default": true
            }
          },
          "required": ["max_depth"]
        }
      },

      {
        "name": "get_scraping_status",
        "description": "Get current scraping status and progress",
        "inputSchema": {
          "type": "object",
          "properties": {}
        }
      },

      {
        "name": "get_scraping_results",
        "description": "Retrieve the latest scraping results",
        "inputSchema": {
          "type": "object",
          "properties": {
            "format": {
              "type": "string",
              "enum": ["json", "summary", "links"],
              "description": "Output format",
              "default": "json"
            }
          }
        }
      },

      {
        "name": "search_documentation",
        "description": "Search scraped documentation for specific content",
        "inputSchema": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "Search query"
            },
            "max_results": {
              "type": "integer",
              "description": "Maximum number of results",
              "default": 10
            }
          },
          "required": ["query"]
        }
      },

      {
        "name": "get_documentation_tree",
        "description": "Get hierarchical tree structure of scraped documentation",
        "inputSchema": {
          "type": "object",
          "properties": {
            "max_depth": {
              "type": "integer",
              "description": "Maximum tree depth to return",
              "default": 3
            }
          }
        }
      },

      {
        "name": "export_scraping_data",
        "description": "Export scraping data in various formats",
        "inputSchema": {
          "type": "object",
          "properties": {
            "format": {
              "type": "string",
              "enum": ["json", "csv", "markdown", "html"],
              "description": "Export format",
              "default": "json"
            },
            "include_metadata": {
              "type": "boolean",
              "description": "Include scraping metadata",
              "default": true
            }
          },
          "required": ["format"]
        }
      }
    ],

    "resources": [
      {
        "uri": "datadog://scraping-status",
        "name": "Current Scraping Status",
        "description": "Real-time scraping status and progress",
        "mimeType": "application/json"
      },

      {
        "uri": "datadog://latest-results",
        "name": "Latest Scraping Results",
        "description": "Most recent scraping results and statistics",
        "mimeType": "application/json"
      },

      {
        "uri": "datadog://documentation-tree",
        "name": "Documentation Tree Structure",
        "description": "Hierarchical structure of scraped documentation",
        "mimeType": "application/json"
      }
    ]
  },

  "n8nIntegration": {
    "mcpWorkflows": {
      "datadog-scraper-mcp-basic": {
        "name": "Datadog Scraper MCP - Basic Usage",
        "description": "Use MCP server for basic Datadog scraping operations",
        "nodes": [
          {
            "parameters": {
              "tool": "scrape_datadog_docs",
              "max_depth": 2,
              "delay": 0.5
            },
            "id": "mcp-scraper",
            "name": "MCP Datadog Scraper",
            "type": "@n8n/n8n-nodes-langchain.mcpTool",
            "typeVersion": 1,
            "position": [240, 300]
          }
        ]
      },

      "datadog-scraper-mcp-advanced": {
        "name": "Datadog Scraper MCP - Advanced Integration",
        "description": "Advanced workflow using MCP server capabilities",
        "nodes": [
          {
            "parameters": {
              "tool": "scrape_datadog_docs",
              "max_depth": "{{ $env.MAX_DEPTH || 2 }}",
              "delay": "{{ $env.DELAY || 0.5 }}"
            },
            "id": "mcp-scraper",
            "name": "MCP Datadog Scraper",
            "type": "@n8n/n8n-nodes-langchain.mcpTool",
            "typeVersion": 1,
            "position": [240, 300]
          },
          {
            "parameters": {
              "tool": "get_scraping_results",
              "format": "summary"
            },
            "id": "mcp-get-results",
            "name": "MCP Get Results",
            "type": "@n8n/n8n-nodes-langchain.mcpTool",
            "typeVersion": 1,
            "position": [460, 300]
          },
          {
            "parameters": {
              "values": {
                "string": [
                  {
                    "name": "report",
                    "value": "ðŸ“Š **MCP Scraping Report**\\n\\nResults: {{ $json }}"
                  }
                ]
              }
            },
            "id": "create-report",
            "name": "Create Report",
            "type": "n8n-nodes-base.set",
            "typeVersion": 3.3,
            "position": [680, 300]
          }
        ],
        "connections": {
          "MCP Datadog Scraper": {
            "main": [
              [
                {
                  "node": "MCP Get Results",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "MCP Get Results": {
            "main": [
              [
                {
                  "node": "Create Report",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        }
      },

      "datadog-scraper-mcp-search": {
        "name": "Datadog Scraper MCP - Documentation Search",
        "description": "Search and analyze scraped Datadog documentation",
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "search-docs",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "webhook-trigger",
            "name": "Webhook Trigger",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [240, 300],
            "webhookId": "search-docs-webhook"
          },
          {
            "parameters": {
              "tool": "search_documentation",
              "query": "={{ $json.body.query }}",
              "max_results": 20
            },
            "id": "mcp-search",
            "name": "MCP Search Documentation",
            "type": "@n8n/n8n-nodes-langchain.mcpTool",
            "typeVersion": 1,
            "position": [460, 300]
          }
        ],
        "connections": {
          "Webhook Trigger": {
            "main": [
              [
                {
                  "node": "MCP Search Documentation",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        }
      }
    }
  },

  "installation": {
    "mcpServerSetup": [
      "1. Install MCP server dependencies:",
      "   pip install mcp fastapi uvicorn",
      "",
      "2. Configure MCP server in n8n:",
      "   - Go to n8n Settings > MCP Servers",
      "   - Add new MCP server with the configuration above",
      "   - Set environment variables for your scraper service",
      "",
      "3. Test the MCP server:",
      "   - Start the MCP server: python datadog_mcp_server.py",
      "   - Verify connection in n8n MCP server settings",
      "",
      "4. Use in workflows:",
      "   - Add MCP Tool nodes to your workflows",
      "   - Select 'datadog-scraper' as the MCP server",
      "   - Choose from available tools"
    ],

    "dockerMcpSetup": [
      "For Docker deployment, update docker-compose.yml:",
      "",
      "services:",
      "  datadog-scraper:",
      "    # ... existing config",
      "    environment:",
      "      - MCP_SERVER_ENABLED=true",
      "      - MCP_SERVER_PORT=8001",
      "",
      "  datadog-mcp-server:",
      "    build:",
      "      context: .",
      "      dockerfile: Dockerfile.mcp",
      "    ports:",
      "      - \"8001:8001\"",
      "    environment:",
      "      - SCRAPER_URL=http://datadog-scraper:8000",
      "    depends_on:",
      "      - datadog-scraper"
    ]
  }
}
